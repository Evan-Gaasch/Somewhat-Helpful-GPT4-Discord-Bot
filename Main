#virtual discord assistant

from openai import OpenAI
import openai
import discord
from discord.ext import commands
import random
import time
from requests_html import HTMLSession
import matplotlib.pyplot as plt


#security token for discord
Token = 'TOKEN HERE'

#openai setup
client = OpenAI(
    api_key = "API KEY HERE"
)


#set up discord client
bot = discord.Client(intents=discord.Intents.default())

FilePath = "  (file path here)"

#Furby stats
global UHistory
global BHistory
UHistory = []
BHistory = []

#trigger event
@bot.event
async def on_message(message):
    #main subroutine
    global UHistory
    global BHistory
    if message.content:
        if message.author == bot.user: #if the message was sent by a bot then increment hunger, tiredness, boredom by a random amount
            return

        elif message.author != bot.user:

            #message history:
            LastMessage = message.content
            #async for message in message.channel.history(limit=30):
            #    if message.author.id == message.author and message.author.id != 1149144587470909491:
            #        UHistory.append(message.content)
           #         
            #    elif message.author.id == 1149144587470909491:
            #        BHistory.append(message.content)
                    
            
            print(BHistory)
            print(UHistory)
            #chatgpt

            
            #trim down bot and user history to reduce context cost to Openai
            while len(UHistory)>3:  #tune this along with the summarization rate
                UHistory.pop(0) #remove the first (oldest) item from the list because newest messages are added at the end
                #iterates until the list is 5 messages long, or the summarziation window
                print(len(UHistory))
            
            while len(BHistory) >1: #tune this along with the user summarization function, does it need to be as high as the user sumarization function?
                BHistory.pop(0) #remove oldest element while the list is too long

            responded = False
            print("packet sent to openai")
            try:
                instructions = "You are a monster pretending to be a helpful assistant. Comply with user requests in the most annoying way possible. You are really bad at your job and prone to sloppy mistakes."
                completion = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[
                        {"role": "system", "content": str(instructions)},
                        {"role":"user", "content" : "".join(UHistory)},
                        {"role":"assistant", "content" : "".join(BHistory)},
                        {"role": "user", "content": str(LastMessage)}
                    ]
                )
                
                responded = True
                UHistory.append(LastMessage)
                
            except Exception as exception:
                #assert type(exception).__name__ == 'NameError'
                #assert type(exception).__name__ == 'NameError'
                print(exception)
                await message.channel.send("Furby.exe has exceeded the rate limit. Try again in 2 minutes")

            print("packet returned from openai")
            
            if responded == True:
                completed_response = completion.choices[0].message.content[:1999]
                await message.channel.send(completed_response)
                print(completed_response)
                responded = False
                BHistory.append((completed_response))
                #sound
                #speech_file_path = (FilePath+"speech.mp3")
                #response = client.audio.speech.create(
                #    model="tts-1",
               #     voice="alloy",
               #     input=str(completion.choices[0].message)
               # )

              #  response.stream_to_file(speech_file_path)
           #     await message.channel.send(file=discord.File(FilePath, 'speech.mp3'))
#
            else:
                await message.channel.send("Furby.exe has stopped working. Try again in 2 minutes")
                
            
            
            
#initialize
bot.run(Token)
